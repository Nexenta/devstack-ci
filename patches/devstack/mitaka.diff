diff --git a/functions-common b/functions-common
index 5ae97455..daf83d60 100644
--- a/functions-common
+++ b/functions-common
@@ -509,6 +509,7 @@ function git_clone {
         # print out the results so we know what change was used in the logs
         cd $git_dest
         git show --oneline | head -1
+        $CIDIR/scripts/patch.sh
         cd $orig_dir
         return
     fi
@@ -565,6 +566,7 @@ function git_clone {
     # print out the results so we know what change was used in the logs
     cd $git_dest
     git show --oneline | head -1
+    $CIDIR/scripts/patch.sh
     cd $orig_dir
 }
 
@@ -1061,7 +1063,8 @@ function apt_get_update {
     time_start "apt-get-update"
 
     local proxies="http_proxy=${http_proxy:-} https_proxy=${https_proxy:-} no_proxy=${no_proxy:-} "
-    local update_cmd="$sudo $proxies apt-get update"
+    local options="-o Acquire::http::Pipeline-Depth=0 -o Acquire::http::No-Cache=true -o Acquire::BrokenProxy=true"
+    local update_cmd="$sudo $proxies apt-get update $options"
     if ! timeout 300 sh -c "while ! $update_cmd; do sleep 30; done"; then
         die $LINENO "Failed to update apt repos, we're dead now"
     fi
@@ -1857,7 +1860,7 @@ function run_phase {
             # white listed elements in tree. We want these to move out
             # over time as well, but they are in tree, so we need to
             # manage that.
-            local exceptions="60-ceph.sh 80-tempest.sh"
+            local exceptions="60-ceph.sh 80-tempest.sh 99-ci.sh"
             local extra
             extra=$(basename $extra_plugin_file_name)
             if [[ ! ( $exceptions =~ "$extra" ) ]]; then
diff --git a/inc/python b/inc/python
index ea6e92d7..bbbdf64d 100644
--- a/inc/python
+++ b/inc/python
@@ -141,7 +141,7 @@ function pip_install {
     # packages like setuptools?
     local pip_version
     pip_version=$(python -c "import pip; \
-                        print(pip.__version__.strip('.')[0])")
+                        print(pip.__version__.split('.')[0])")
     if (( pip_version<6 )); then
         die $LINENO "Currently installed pip version ${pip_version} does not" \
             "meet minimum requirements (>=6)."
diff --git a/lib/infra b/lib/infra
index cf003cce..0a9ee4fa 100644
--- a/lib/infra
+++ b/lib/infra
@@ -29,7 +29,8 @@ GITDIR["pbr"]=$DEST/pbr
 # install_infra() - Collect source and prepare
 function install_infra {
     local PIP_VIRTUAL_ENV="$REQUIREMENTS_DIR/.venv"
-    [ ! -d $PIP_VIRTUAL_ENV ] && virtualenv $PIP_VIRTUAL_ENV
+    [ ! -d $PIP_VIRTUAL_ENV ] && virtualenv --no-setuptools $PIP_VIRTUAL_ENV
+    PIP_VIRTUAL_ENV=$PIP_VIRTUAL_ENV pip_install -U setuptools
     # We don't care about testing git pbr in the requirements venv.
     PIP_VIRTUAL_ENV=$PIP_VIRTUAL_ENV pip_install -U pbr
     PIP_VIRTUAL_ENV=$PIP_VIRTUAL_ENV pip_install $REQUIREMENTS_DIR
diff --git a/lib/tempest b/lib/tempest
index ef66d902..1ec401c2 100644
--- a/lib/tempest
+++ b/lib/tempest
@@ -512,13 +512,16 @@ function configure_tempest {
     # Using ``CINDER_ENABLED_BACKENDS``
     if [[ -n "$CINDER_ENABLED_BACKENDS" ]] && [[ $CINDER_ENABLED_BACKENDS =~ .*,.* ]]; then
         iniset $TEMPEST_CONFIG volume-feature-enabled multi_backend "True"
+        local backends_list=''
         local i=1
         local be
         for be in ${CINDER_ENABLED_BACKENDS//,/ }; do
             local be_name=${be##*:}
+            backends_list="${backends_list:+$backends_list,}$be_name"
             iniset $TEMPEST_CONFIG volume "backend${i}_name" "$be_name"
             i=$(( i + 1 ))
         done
+        iniset $TEMPEST_CONFIG volume "backend_names" "$backends_list"
     fi
 
     if [ $TEMPEST_VOLUME_DRIVER != "default" -o \
diff --git a/tools/cap-pip.txt b/tools/cap-pip.txt
index c2802676..375d937c 100644
--- a/tools/cap-pip.txt
+++ b/tools/cap-pip.txt
@@ -1 +1,2 @@
-pip!=8
+pip!=8,<10
+setuptools==30.4.0
diff --git a/tools/install_pip.sh b/tools/install_pip.sh
index 5d314c83..a2f79c35 100755
--- a/tools/install_pip.sh
+++ b/tools/install_pip.sh
@@ -135,8 +135,4 @@ fi
 
 set -x
 
-# Note setuptools is part of requirements.txt and we want to make sure
-# we obey any versioning as described there.
-pip_install_gr setuptools
-
 get_versions
