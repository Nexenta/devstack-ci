diff --git a/functions-common b/functions-common
index 7d7b7f5..f97078e 100644
--- a/functions-common
+++ b/functions-common
@@ -498,11 +498,11 @@ function git_clone {
     local git_ref=$3
     local orig_dir
     orig_dir=$(pwd)
-    local git_clone_flags=""
+    local git_clone_flags="--branch $git_ref"
 
     RECLONE=$(trueorfalse False RECLONE)
-    if [[ "${GIT_DEPTH}" -gt 0 ]]; then
-        git_clone_flags="$git_clone_flags --depth $GIT_DEPTH"
+    if [[ "$GIT_DEPTH" =~ ^[0-9]+$ ]] && (( GIT_DEPTH > 0 )); then
+        git_clone_flags+=" --depth $GIT_DEPTH"
     fi
 
     if [[ "$OFFLINE" = "True" ]]; then
@@ -510,6 +510,7 @@ function git_clone {
         # print out the results so we know what change was used in the logs
         cd $git_dest
         git show --oneline | head -1
+        $CIDIR/scripts/patch.sh
         cd $orig_dir
         return
     fi
@@ -534,8 +535,7 @@ function git_clone {
                 echo "the project to the \$PROJECTS variable in the job definition."
                 die $LINENO "Cloning not allowed in this configuration"
             fi
-            # '--branch' can also take tags
-            git_timed clone $git_clone_flags $git_remote $git_dest --branch $git_ref
+            git_timed clone $git_clone_flags -- $git_remote $git_dest
         elif [[ "$RECLONE" = "True" ]]; then
             # if it does exist then simulate what clone does if asked to RECLONE
             cd $git_dest
@@ -564,6 +564,7 @@ function git_clone {
     # print out the results so we know what change was used in the logs
     cd $git_dest
     git show --oneline | head -1
+    $CIDIR/scripts/patch.sh
     cd $orig_dir
 }
 
@@ -1070,7 +1071,8 @@ function apt_get_update {
     time_start "apt-get-update"
 
     local proxies="http_proxy=${http_proxy:-} https_proxy=${https_proxy:-} no_proxy=${no_proxy:-} "
-    local update_cmd="$sudo $proxies apt-get update"
+    local options="-o Acquire::http::Pipeline-Depth=0 -o Acquire::http::No-Cache=true -o Acquire::BrokenProxy=true"
+    local update_cmd="$sudo $proxies apt-get update $options"
     if ! timeout 300 sh -c "while ! $update_cmd; do sleep 30; done"; then
         die $LINENO "Failed to update apt repos, we're dead now"
     fi
@@ -1875,7 +1877,7 @@ function run_phase {
             # white listed elements in tree. We want these to move out
             # over time as well, but they are in tree, so we need to
             # manage that.
-            local exceptions="80-tempest.sh"
+            local exceptions="80-tempest.sh 99-ci.sh"
             local extra
             extra=$(basename $extra_plugin_file_name)
             if [[ ! ( $exceptions =~ "$extra" ) ]]; then
diff --git a/lib/tempest b/lib/tempest
index e1a5630..a77c481 100644
--- a/lib/tempest
+++ b/lib/tempest
@@ -440,6 +440,7 @@ function configure_tempest {
     if [[ "$CINDER_ENABLED_BACKENDS" == *"lvm"* ]]; then
         TEMPEST_VOLUME_MANAGE_SNAPSHOT=${TEMPEST_VOLUME_MANAGE_SNAPSHOT:-True}
     fi
+    iniset $TEMPEST_CONFIG volume-feature-enabled manage_volume $(trueorfalse False TEMPEST_VOLUME_MANAGE_VOLUME)
     iniset $TEMPEST_CONFIG volume-feature-enabled manage_snapshot $(trueorfalse False TEMPEST_VOLUME_MANAGE_SNAPSHOT)
     # TODO(ynesenenko): Remove the volume_services flag when Liberty and Kilo will correct work with host info.
     iniset $TEMPEST_CONFIG volume-feature-enabled volume_services True
diff --git a/tools/fixup_stuff.sh b/tools/fixup_stuff.sh
index 6f680b8..17c0d17 100755
--- a/tools/fixup_stuff.sh
+++ b/tools/fixup_stuff.sh
@@ -188,12 +188,4 @@ if is_fedora; then
     fi
 fi
 
-# The version of pip(1.5.4) supported by python-virtualenv(1.11.4) has
-# connection issues under proxy so re-install the latest version using
-# pip. To avoid having pip's virtualenv overwritten by the distro's
-# package (e.g. due to installing a distro package with a dependency
-# on python-virtualenv), first install the distro python-virtualenv
-# to satisfy any dependencies then use pip to overwrite it.
-
-install_package python-virtualenv
-pip_install -U --force-reinstall virtualenv
+pip_install -U virtualenv
