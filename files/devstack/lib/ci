#!/usr/bin/env bash

function ci_install {
	if is_service_enabled cinder; then
		git_clone $NEXENTA_CINDER_REPOSITORY $NEXENTA_CINDER_DESTINATION $NEXENTA_BRANCH
		pushd $CINDER_DIR/cinder/volume/drivers

		if [[ -d "nexenta" ]]; then
			rm -rf nexenta
		fi

		ln -s $NEXENTA_CINDER_DESTINATION/cinder/volume/drivers/nexenta
		popd
	fi

	if is_service_enabled manila; then
		git_clone $NEXENTA_MANILA_REPOSITORY $NEXENTA_MANILA_DESTINATION $NEXENTA_BRANCH
		pushd $MANILA_DIR/manila/share/drivers

		if [[ -d "nexenta" ]]; then
			rm -rf nexenta
		fi

		ln -s $NEXENTA_MANILA_DESTINATION/manila/share/drivers/nexenta
		popd

	fi
}

function ci_extra {
	local key_type key_file
	local tnt pid gid

	if is_service_enabled nova; then
		case "$VIRT_DRIVER" in
		libvirt)
			if [[ -n "$QEMU_CONF" && -f "$QEMU_CONF" ]]; then
				echo 'security_driver = "none"' | \
					sudo tee -a $QEMU_CONF
				if [[ -n "$LIBVIRT_DAEMON" ]]; then
					restart_service $LIBVIRT_DAEMON
				fi
			fi
			;;
		*)
			;;
		esac

		if [[ ! -e "$TOP_DIR/userrc_early" ]]; then
			return
		fi

		source $TOP_DIR/userrc_early

		for key_type in rsa dsa ecdsa ed25519; do
			key_file="$HOME/.ssh/id_${key_type}.key"

			if [[ ! -r "$key_file" ]]; then
				ssh-keygen -N '' -t $key_type -f $key_file
			fi

			key_file+='.pub'

			if [[ -r "$key_file" ]]; then
				openstack keypair create --public-key $key_file $HOSTNAME
				break
			fi
		done

		for tnt in admin demo; do
			pid=$(openstack project list | awk '{if ($4=="'$tnt'") {print $2}}')

			if [[ -z "$pid" ]]; then
				continue
			fi

			gid=$(openstack security group list | awk '{if ($(NF-1)=="'$pid'") {print $2}}')

			if [[ -z "$gid" ]]; then
				continue
			fi

			openstack security group rule create --proto icmp --dst-port 0 $gid
			openstack security group rule create --proto tcp --dst-port 22 $gid
		done
	fi
}

function ci_test_config {
	if is_service_enabled tempest; then
		if is_service_enabled cinder; then
			case "$CI_BRANCH" in
			ocata)
				iniset $TEMPEST_CONFIG volume catalog_type volumev3
				;;
			*)
				;;
			esac

			case "$CI_BACKEND" in
			ns5_iscsi|ns5_nfs)
				iniset $TEMPEST_CONFIG volume-feature-enabled consistency_group True
				;;
			*)
				;;
			esac

			case "$CI_BRANCH" in
			pike|queens|rocky|master)
				iniset $TEMPEST_CONFIG volume-feature-enabled volume_revert True
				;;
			*)
				;;
			esac
		fi

		if is_service_enabled manila; then
			iniset $TEMPEST_CONFIG share capability_storage_protocol NFS
			iniset $TEMPEST_CONFIG share capability_snapshot_support True
			iniset $TEMPEST_CONFIG share capability_create_share_from_snapshot_support True
			iniset $TEMPEST_CONFIG share capability_revert_to_snapshot_support True
			iniset $TEMPEST_CONFIG share capability_mount_snapshot_support False
			iniset $TEMPEST_CONFIG share backend_names $MANILA_ENABLED_BACKENDS
			iniset $TEMPEST_CONFIG share multi_backend True
			iniset $TEMPEST_CONFIG share multitenancy_enabled False
			iniset $TEMPEST_CONFIG share enable_protocols nfs
			iniset $TEMPEST_CONFIG share enable_ip_rules_for_protocols nfs
			iniset $TEMPEST_CONFIG share enable_ro_access_level_for_protocols nfs
			iniset $TEMPEST_CONFIG share run_mount_snapshot_tests False
			iniset $TEMPEST_CONFIG share run_quota_tests True
			iniset $TEMPEST_CONFIG share run_extend_tests True
			iniset $TEMPEST_CONFIG share run_revert_to_snapshot_tests True
			iniset $TEMPEST_CONFIG share run_share_group_tests True
			iniset $TEMPEST_CONFIG share run_snapshot_tests True
			iniset $TEMPEST_CONFIG share run_consistency_group_tests False
			iniset $TEMPEST_CONFIG share run_replication_tests False
			iniset $TEMPEST_CONFIG share run_migration_tests False
			iniset $TEMPEST_CONFIG share run_manage_unmanage_tests False
			iniset $TEMPEST_CONFIG share run_manage_unmanage_snapshot_tests False
	
			case "$NEXENTA_BACKEND_NAME" in
			ns4_manila)
				iniset $TEMPEST_CONFIG share run_shrink_tests False
				;;
			ns5_manila)
				iniset $TEMPEST_CONFIG share run_shrink_tests True
				;;
			esac
		fi
	fi
}

function ci_clean {
	local mount_point

	iscsiadm -m node -u
	iscsiadm -m node --op delete

	for mount_point in $(df | awk '{if ($NF ~ "^'$CINDER_STATE_PATH'") print $NF}'); do
		sudo umount -f $mount_point && rmdir $mount_point
	done
}

function ci_unstack {
	ci_clean
}

function ci_cip {
	local space=$1
	local name=$2
	local format='custom-columns=NAME:.metadata.name,IP:.status.podIP'

	kubectl get pods --no-headers --namespace="$space" --output="$format" | \
		awk '/^'$name'/{print $2}'
}
