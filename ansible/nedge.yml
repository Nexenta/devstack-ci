---
- name: Install Nexenta Edge CI Environment
  hosts: local
  vars:
    required:
      - config
  tasks:
    - name: Set Configuration Parameters
      block:
        - name: Set Global Required Parameters
          set_fact:
            {"{{ item }}":"{{ lookup('env', item) }}"}
          when: hostvars['localhost'][item] is undefined
          with_items: "{{ required }}"

        - name: Print Initial Configuration
          debug:
            msg: "{{ config }}"

        - name: Check Required Parameters
          fail:
            msg: "Required parameter {{ item }} is not defined"
          when: hostvars['localhost'][item] == ""
          with_items: "{{ required }}"

        - name: Set Current Workspace via Jenkins Environment
          set_fact:
            workspace: "{{ lookup('env', 'WORKSPACE') }}"
          when: workspace is undefined

        - name: Set Current Workspace via Shell Environment
          set_fact:
            workspace: "{{ lookup('env', 'PWD') }}"
          when: workspace == ""

        - name: Set Current Build Number
          set_fact:
            build: "{{ lookup('env', 'BUILD_NUMBER') }}"
          when: build is undefined

        - name: Set Predefined Build Number
          set_fact:
            build: 0
          when: build == ""

        - name: Set Common SSH Options
          set_fact:
            ssh: "{{ ssh | default('-q') }} -o {{ item.key }}={{ item.value }}"
          with_items: "{{ config.ssh }}"

        - name: Set Global Parameters
          set_fact:
            matrix:
              ci:
                build: "{{ build }}"
                source: "{{ workspace }}"
                ssh: "{{ ssh }}"

        - name: Combine Global Parameters
          set_fact:
            config: "{{ config | combine(matrix, recursive=True) }}"

        - name: Set OS Type and Version
          set_fact:
            matrix:
              ci:
                ostype: "{{ item.type }}"
                osversion: "{{ item.version }}"
          when: item.branch == config.ci.branch
          with_items: "{{ config.matrix.os }}"

        - name: Combine OS Type and Version
          set_fact:
            config: "{{ config | combine(matrix, recursive=True) }}"

        - name: Set Current DevStack Branch
          set_fact:
            matrix:
              devstack:
                branch: "{{ item.name }}"
          when: item.ci == config.ci.branch and item.project == "devstack"
          with_items: "{{ config.matrix.branch }}"

        - name: Set Default DevStack Branch
          set_fact:
            matrix:
              devstack:
                branch: "{{ item.name }}"
          when: (matrix.devstack is not defined
                or matrix.devstack.branch is not defined)
                and item.ci == config.ci.branch
                and item.project == "default"
          with_items: "{{ config.matrix.branch }}"

        - name: Combine Current DevStack Branch
          set_fact:
            config: "{{ config | combine(matrix, recursive=True) }}"

        - name: Set Current Backend Parameters
          set_fact:
            matrix:
              backend: "{{ item.value }}"
          when: item.key == config.ci.backend
          with_dict: "{{ config }}"

        - name: Combine Current Backend Parameters
          set_fact:
            config: "{{ config | combine(matrix, recursive=True) }}"

#        - name: Create Inventory for Current Backend
#          add_host:
#            name: "{{ item.host }}"
#            groups: "{{ config.ci.project }}"
#            ansible_host: "{{ item.host }}"
#            ansible_user: "{{ config.backend.ssh.user }}"
#            ansible_connection: "ssh"
#            ansible_ssh_pass: " {{ config.backend.ssh.password }}"
#            ansible_ssh_private_key_file: "{{ ansible_env.HOME }}/.ssh/id_rsa"
#            ansible_ssh_common_args: "{{ config.ci.ssh }}"
#          with_items: "{{ config.backend.instances }}"

        - name: Create Unique BIOS UUID
          bios_uuid:
            project: "{{ config.ci.project }}"
            branch: "{{ config.ci.branch }}"
            backend: "{{ config.ci.backend }}"
            ostype: "{{ config.ci.ostype }}"
            osversion: "{{ config.ci.osversion }}"
          register: bios

        - name: Set Dependent Parameters
          set_fact:
            matrix:
              vm:
                uuid: "{{ bios.uuid }}"
#                name: "{{ config.ci.project }}-{{ branch }}-{{ backend | replace('_', '-') }}-{{ bios.uuid }}"

        - name: Combine Dependent Parameters
          set_fact:
            config: "{{ config | combine(matrix, recursive=True) }}"

        - name: Print Current Configuration
          debug:
            msg: "{{ config }}"

      rescue:
        - name: Set Error Flag
          set_fact:
            error: "Configuration parameters task failed"

        - name: Stop Current Job
          fail:
            msg: "{{ error }}"

      always:
        - name: Check Error Flag
          debug:
            msg: "Notify failure handler"
          changed_when: True
          when: error is defined
          notify: failure

    - name: Deploy Virtual Machine
      block:
        - name: Random Delay
          pause:
            seconds: "{{ config.ci.delay | random }}"

        - name: Destroy Virtual Machine
          vmware_guest:
            validate_certs: False
            hostname: "{{ config.vsphere.host }}"
            username: "{{ config.vsphere.user }}"
            password: "{{ config.vsphere.password }}"
            datacenter: "{{ config.vsphere.datacenter }}"
#            cluster: "{{ config.vsphere.cluster }}"
            esxi_hostname: "{{ config.vsphere.esxi }}"
            folder: "{{ config.vsphere.datacenter }}/vm/{{ config.vsphere.folder }}"
            name: "{{ config.vm.name }}"
            state: "absent"
            force: yes

        - name: Create Virtual Machine
          vmware_guest:
            validate_certs: False
            hostname: "{{ config.vsphere.host }}"
            username: "{{ config.vsphere.user }}"
            password: "{{ config.vsphere.password }}"
            datacenter: "{{ config.vsphere.datacenter }}"
#            cluster: "{{ config.vsphere.cluster }}"
            esxi_hostname: "{{ config.vsphere.esxi }}"
            folder: "{{ config.vsphere.datacenter }}/vm/{{ config.vsphere.folder }}"
            uuid: "{{ config.vm.uuid }}"
            name: "{{ config.vm.name }}"
            guest_id: "{{ config.vm.guest }}"
            disk: "{{ config.vm.disks }}"
            networks: "{{ config.vm.networks }}"
            hardware: "{{ config.vm.hardware }}"
            customvalues: "{{ config.vm.customvalues }}"
            wait_for_ip_address: True
            state: "poweredon"

        - name: Identify Virtual Machine
          vmware_guest_facts:
            validate_certs: False
            hostname: "{{ config.vsphere.host }}"
            username: "{{ config.vsphere.user }}"
            password: "{{ config.vsphere.password }}"
            datacenter: "{{ config.vsphere.datacenter }}"
            uuid: "{{ config.vm.uuid }}"
            name: "{{ config.vm.name }}"
          register: vm0

        - name: Print Virtual Machine Parameters
          debug:
            var: vm0

        - name: Check Virtual Machine IP Address
          fail:
            msg: "Virtual Machine IP address is not defined"
          when: (vm0.instance.ipv4 is not defined) or (vm0.instance.ipv4 == "")

        - name: Wait for SSH Port to Become Open and Contain "OpenSSH"
          wait_for:
            port: 22
            host: "{{ vm0.instance.ipv4 }}"
            search_regex: "OpenSSH"

        - name: Create Inventory for Virtual Machine IP address
          add_host:
            name: "{{ config.vm.name }}0"
            groups: "{{ config.ci.project }}"
            ansible_host: "{{ vm0.instance.ipv4 }}"
            ansible_user: "{{ config.devstack.user }}"
            ansible_connection: "ssh"
            ansible_ssh_pass: " {{ config.devstack.password }}"
            ansible_ssh_private_key_file: "{{ ansible_env.HOME }}/.ssh/id_rsa"
            ansible_ssh_common_args: "{{ config.ci.ssh }}"

        - name: Install Required Packages
          apt:
            name: "{{ config.nedge.packages }}"
            state: "present"
            update_cache: "yes"
#          vars:
#            packages: "{{ config.nedge.packages }}"

        - name: Change Host OS Hostname
          template:
            src: "{{ config.ci.source }}/templates/etc-hostname.j2"
            dest: "/etc/hostname"
            mode: 0644
          become: yes
          delegate_to: "{{ config.vm.name }}0"

        - name: Change Host OS Hosts
          template:
            src: "{{ config.ci.source }}/templates/etc-hosts.j2"
            dest: "/etc/hosts"
            mode: 0644
          become: yes
          delegate_to: "{{ config.vm.name }}0"

        - name: Change Host OS Network Settings
          template:
            src: "{{ config.ci.source }}/templates/etc-network-interfaces.j2"
            dest: "/etc/network/interfaces"
            mode: 0644
          become: yes
          delegate_to: "{{ config.vm.name }}0"

        - name: Reboot Virtual Machine
          vmware_guest:
            validate_certs: False
            hostname: "{{ config.vsphere.host }}"
            username: "{{ config.vsphere.user }}"
            password: "{{ config.vsphere.password }}"
            uuid: "{{ config.vm.uuid }}"
            name: "{{ config.vm.name }}"
            wait_for_ip_address: True
            state_change_timeout: "{{ config.vm.timeout }}"
            state: "rebootguest"

        - name: Identify Virtual Machine
          vmware_guest_facts:
            validate_certs: False
            hostname: "{{ config.vsphere.host }}"
            username: "{{ config.vsphere.user }}"
            password: "{{ config.vsphere.password }}"
            datacenter: "{{ config.vsphere.datacenter }}"
            uuid: "{{ config.vm.uuid }}"
            name: "{{ config.vm.name }}"
          register: vm

        - name: Print Virtual Machine Parameters
          debug:
            var: vm

        - name: Check Virtual Machine IP Address
          fail:
            msg: "Virtual Machine IP address is not defined"
          when: (vm.instance.ipv4 is not defined) or (vm.instance.ipv4 == "")

        - name: Wait for SSH Port to Become Open and Contain "OpenSSH"
          wait_for:
            port: 22
            host: "{{ vm.instance.ipv4 }}"
            search_regex: "OpenSSH"

        - name: Create Inventory for Virtual Machine IP address
          add_host:
            name: "{{ config.vm.name }}"
            groups: "{{ config.ci.project }}"
            ansible_host: "{{ vm.instance.ipv4 }}"
            ansible_user: "{{ config.devstack.user }}"
            ansible_connection: "ssh"
            ansible_ssh_pass: " {{ config.devstack.password }}"
            ansible_ssh_private_key_file: "{{ ansible_env.HOME }}/.ssh/id_rsa"
            ansible_ssh_common_args: "{{ config.ci.ssh }}"

      rescue:
        - name: Set Error Flag
          set_fact:
            error: "Create virtual machine task failed"

        - name: Stop Current Job
          fail:
            msg: "{{ error }}"

      always:
        - name: Check Error Flag
          debug:
            msg: "Notify failure handler"
          changed_when: True
          when: error is defined
          notify: failure

    - name: Compound DevStack Task
      block:
        - name: Checkout CI Repository
          git:
            repo: "{{ config.ci.repository }}"
            dest: "{{ config.ci.base }}/{{ config.ci.destination }}"
            depth: 1
          delegate_to: "{{ config.vm.name }}"

        - name: Copy Nedge Install Script
          template:
            src: "{{ config.ci.source }}/templates/nedge.sh.j2"
            dest: "{{ config.ci.base }}/{{ config.ci.destination }}/scripts/nedge.sh"
            mode: 0755
          delegate_to: "{{ config.vm.name }}"

        - name: Install DevStack Environment
          shell: "{{ config.ci.base }}/{{ config.ci.destination }}/scripts/nedge.sh"
          delegate_to: "{{ config.vm.name }}"

      rescue:
        - name: Set Error Flag
          set_fact:
            error: "Compound DevStack Task Failed"

        - name: Stop Current Job
          fail:
            msg: "{{ error }}"

      always:
        - name: Check Error Flag
          debug:
            msg: "Notify failure handler"
          changed_when: True
          when: error is defined
          notify: failure

        - name: Find Results Files
          find:
            paths: "{{ item.source | regex_search('^/') | ternary('', config.ci.base + '/') + item.source }}"
            patterns: "{{ item.pattern }}"
            file_type: "any"
            follow: "yes"
          register: find
          with_items: "{{ config.result.tree }}"
          delegate_to: "{{ config.vm.name }}"

        - name: Create Results Directories
          file:
            path: "{{ config.ci.source }}/{{ config.result.base }}/{{ config.ci.build }}/{{ item.item.destination }}"
            state: "directory"
            recurse: "yes"
            mode: 0755
          with_items: "{{ find.results }}"

        - name: Fetch Results Files
          fetch:
            src: "{{ item.1.path }}"
            dest: "{{ config.ci.source }}/{{ config.result.base }}/{{ config.ci.build }}/{{ item.0.item.destination }}/{{ item.1.path | basename }}"
            validate_checksum: "no"
            fail_on_missing: "no"
            flat: "yes"
          with_subelements:
            - "{{ find.results }}"
            - files
          delegate_to: "{{ config.vm.name }}"

        - name: Find Log Files
          find:
            paths: "{{ config.ci.base }}/{{ config.ci.logs }}"
            patterns: "{{ config.result.logs | join(',') }}"
            file_type: "any"
            follow: "yes"
            size: 1
          register: find
          delegate_to: "{{ config.vm.name }}"

        - name: Tail Latest Log File
          shell: "tail -50 {{ find.files | default({}) | sort(attribute='mtime') | reverse | map(attribute='path') | list | first }}"
          register: tail
          when: find is defined
          delegate_to: "{{ config.vm.name }}"

        - name: Display Latest Log File
          debug:
            msg: "{{ tail.stdout_lines }}"
          when: tail is defined

        - name: Create Latest Link
          file:
            path: "{{ config.ci.source }}/{{ config.result.base }}/latest"
            src: "{{ config.ci.source }}/{{ config.result.base }}/{{ config.ci.build }}"
            state: "link"

  handlers:
    - name: Failure Handler
      fail:
        msg: "Failure: {{ error | default('unknown error') }}"
      listen: failure
...
