---
- name: OpenStack Continuous Integration
  hosts: local
  vars_files:
    - global.yml
  tasks:
    - name: Set required parameters
      set_fact:
        {"{{ item }}":"{{ lookup('env', item) }}"}
      when: hostvars['localhost'][item] is undefined
      with_items: "{{ required }}"

    - name: Check required parameters
      fail:
        msg: "Required parameter {{ item }} is not defined"
      when: hostvars['localhost'][item] == ""
      with_items: "{{ required }}"

    - name: Set current workspace via Jenkins environment
      set_fact:
        workspace: "{{ lookup('env', 'WORKSPACE') }}"
      when: workspace is undefined

    - name: Set current workspace via shell environment
      set_fact:
        workspace: "{{ lookup('env', 'PWD') }}"
      when: workspace == ""

    - name: Set current build number
      set_fact:
        build: "{{ lookup('env', 'BUILD_NUMBER') }}"
      when: build is undefined

    - name: Set predefined build number
      set_fact:
        build: "0"
      when: build == ""

    - name: Set common SSH options
      set_fact:
        ssh: "{{ ssh | default('-q') }} -o {{ item.option }}={{ item.value }}"
      with_items: "{{ config.ssh }}"

    - name: Set global parameters
      set_fact:
        matrix:
          ci:
            build: "{{ build }}"
            source: "{{ workspace }}"
            branch: "{{ branch }}"
            backend: "{{ backend }}"
            ssh: "{{ ssh }}"

    - name: Combine global parameters
      set_fact:
        config: "{{ config | combine(matrix, recursive=True) }}"

    - name: Set OS type and version
      set_fact:
        matrix:
          ci:
            ostype: "{{ item.type }}"
            osversion: "{{ item.version }}"
      when: item.branch == config.ci.branch
      with_items: "{{ config.matrix.os }}"

    - name: Combine OS type and version
      set_fact:
        config: "{{ config | combine(matrix, recursive=True) }}"

    - name: Set DevStack branch
      set_fact:
        matrix:
          devstack:
            branch: "{{ item.name }}"
      when: item.ci == config.ci.branch and item.project == "devstack"
      with_items: "{{ config.matrix.branch }}"

    - name: Set default DevStack branch
      set_fact:
        matrix:
          devstack:
            branch: "{{ item.name }}"
      when: (matrix.devstack is not defined
            or matrix.devstack.branch is not defined)
            and item.ci == config.ci.branch
            and item.project == "default"
      with_items: "{{ config.matrix.branch }}"

    - name: Combine active DevStack branch
      set_fact:
        config: "{{ config | combine(matrix, recursive=True) }}"

    - name: Set current backend parameters
      set_fact:
        matrix:
          backend: "{{ item.value }}"
      when: item.key == config.ci.backend
      with_dict: "{{ config }}"

    - name: Combine active backend parameters
      set_fact:
        config: "{{ config | combine(matrix, recursive=True) }}"

    - name: Create unique pseudo-random BIOS UUID
      bios_uuid:
        project: "{{ config.ci.project }}"
        branch: "{{ config.ci.branch }}"
        backend: "{{ config.ci.backend }}"
        ostype: "{{ config.ci.ostype }}"
        osversion: "{{ config.ci.osversion }}"
      register: bios

    - name: Set dependent parameters
      set_fact:
        matrix:
          vm:
            uuid: "{{ bios.uuid }}"
            name: "{{ config.ci.project }}-{{ branch }}-{{ backend | replace('_', '-') }}-{{ bios.uuid }}"

    - name: Combine dependent parameters
      set_fact:
        config: "{{ config | combine(matrix, recursive=True) }}"

    - name: Print CI configuration
      debug:
        msg: "{{ config }}"

    - name: Random delay
      pause:
        seconds: "{{ config.ci.delay | random }}"

    - name: Destroy VM
      vmware_guest:
        validate_certs: False
        hostname: "{{ config.vsphere.host }}"
        username: "{{ config.vsphere.user }}"
        password: "{{ config.vsphere.password }}"
        datacenter: "{{ config.vsphere.datacenter }}"
        cluster: "{{ config.vsphere.cluster }}"
        folder: "{{ config.vsphere.datacenter }}/vm/{{ config.vsphere.folder }}"
        name: "{{ config.vm.name }}"
        state: absent
        force: yes

    - name: Create new VM
      vmware_guest:
        validate_certs: False
        hostname: "{{ config.vsphere.host }}"
        username: "{{ config.vsphere.user }}"
        password: "{{ config.vsphere.password }}"
        datacenter: "{{ config.vsphere.datacenter }}"
        cluster: "{{ config.vsphere.cluster }}"
        resource_pool: "{{ config.vsphere.pool }}"
        folder: "{{ config.vsphere.datacenter }}/vm/{{ config.vsphere.folder }}"
        uuid: "{{ config.vm.uuid }}"
        name: "{{ config.vm.name }}"
        guest_id: "{{ config.vm.guest }}"
        disk: "{{ config.vm.disks }}"
        networks: "{{ config.vm.networks }}"
        hardware:
          memory_mb: "{{ config.vm.ram }}"
          num_cpus: "{{ config.vm.cpu }}"
          scsi: "{{ config.vm.scsi }}"
        wait_for_ip_address: True
        state: "poweredon"
      register: vm

    - name: Print VM parameters
      debug:
        var: vm

    - name: Check VM IP address
      fail:
        msg: "VM IP address is not defined"
      when: (vm.instance.ipv4 is not defined) or (vm.instance.ipv4 == "")

    - name: Wait for SSH port to become open and contain "OpenSSH"
      wait_for:
        port: 22
        host: "{{ vm.instance.ipv4 }}"
        search_regex: "OpenSSH"

    - name: Create inventory for VM IP address
      add_host:
        name: "{{ config.vm.name }}"
        groups: "{{ config.ci.project }}"
        ansible_host: "{{ vm.instance.ipv4 }}"
        ansible_user: "{{ config.devstack.user }}"
        ansible_connection: "ssh"
        ansible_ssh_private_key_file: "{{ ansible_env.HOME }}/.ssh/id_rsa"
        ansible_ssh_common_args: "{{ config.ci.ssh }}"

    - name: Compound OpenStack task
      block:
        - name: Checkout CI repository
          git:
            repo: "{{ config.ci.repository }}"
            dest: "{{ config.ci.base }}/{{ config.ci.destination }}"
          delegate_to: "{{ config.vm.name }}"

        - name: Checkout DevStack repository
          git:
            repo: "{{ config.devstack.repository }}"
            dest: "{{ config.ci.base }}/{{ config.devstack.destination }}"
            version: "{{ config.devstack.branch }}"
          delegate_to: "{{ config.vm.name }}"

        - name: Copy DevStack profile
          template:
            src: "{{ config.ci.source }}/templates/local.conf.j2"
            dest: "{{ config.ci.base }}/{{ config.devstack.destination }}/local.conf"
            mode: 0644
          delegate_to: "{{ config.vm.name }}"

        - name: Copy CI profile
          template:
            src: "{{ config.ci.source }}/templates/env.sh.j2"
            dest: "{{ config.ci.base }}/{{ config.ci.destination }}/scripts/env.sh"
            mode: 0755
          delegate_to: "{{ config.vm.name }}"

        - name: Patch DevStack source code
          shell: "{{ config.ci.base }}/{{ config.ci.destination }}/scripts/patch.sh"
          args:
            chdir: "{{ config.ci.base }}/{{ config.devstack.destination }}"
          delegate_to: "{{ config.vm.name }}"

        - name: Install DevStack environment
          shell: "{{ config.ci.base }}/{{ config.devstack.destination }}/stack.sh"
          delegate_to: "{{ config.vm.name }}"

        - name: Acquire backend lock
          flock:
            name: "{{ config.ci.project }}-{{ config.ci.backend }}"
            action: "acquire"

        - name: Run test suite - first pass
          shell: "{{ config.ci.base }}/{{ config.ci.destination }}/scripts/test.sh"
          delegate_to: "{{ config.vm.name }}"

        - name: Run test suite - second pass
          shell: "{{ config.ci.base }}/{{ config.ci.destination }}/scripts/test.sh"
          delegate_to: "{{ config.vm.name }}"

      rescue:
        - name: Set failure flag
          set_fact:
            failure: True

      always:
        - name: Release backend lock
          flock:
            name: "{{ config.ci.project }}-{{ config.ci.backend }}"
            action: "release"

        - name: Find results files
          find:
            paths: "{{ item.source | regex_search('^/') | ternary('', config.ci.base + '/') + item.source }}"
            patterns: "{{ item.pattern }}"
            file_type: "any"
            follow: "yes"
          register: find
          with_items: "{{ config.result.tree }}"
          delegate_to: "{{ config.vm.name }}"

        - name: Create results directories
          file:
            path: "{{ config.ci.source }}/{{ config.result.base }}/{{ config.ci.build }}/{{ item.item.destination }}"
            state: "directory"
            recurse: "yes"
            mode: 0755
          with_items: "{{ find.results }}"

        - name: Fetch results files
          fetch:
            src: "{{ item.1.path }}"
            dest: "{{ config.ci.source }}/{{ config.result.base }}/{{ config.ci.build }}/{{ item.0.item.destination }}/{{ item.1.path | basename }}"
            validate_checksum: "no"
            flat: "yes"
          with_subelements:
            - "{{ find.results }}"
            - files
          delegate_to: "{{ config.vm.name }}"

        - name: Find log files
          find:
            paths: "{{ config.ci.source }}/{{ config.result.base }}/{{ config.ci.build }}"
            patterns: "{{ config.ci.logs | join(',') }}"
            size: 1
            recurse: "yes"
          register: find

        - name: Tail log file
          shell: "tail -50 {{ item }}"
          with_first_found:
            - files: "{{ find.files | sort(attribute='mtime') | reverse | map(attribute='path') | list }}"
              skip: True
          register: tail

        - name: Display log file
          debug:
            msg: "{{ tail.results | map(attribute='stdout_lines') | list }}"
          when: tail.results

        - name: Destroy VM
          vmware_guest:
            validate_certs: False
            hostname: "{{ config.vsphere.host }}"
            username: "{{ config.vsphere.user }}"
            password: "{{ config.vsphere.password }}"
            datacenter: "{{ config.vsphere.datacenter }}"
            cluster: "{{ config.vsphere.cluster }}"
            folder: "{{ config.vsphere.datacenter }}/vm/{{ config.vsphere.folder }}"
            name: "{{ config.vm.name }}"
            state: absent
            force: yes
          when: (config.vm.policy == "no") or
                (config.vm.policy == "onerror" and failure is undefined)

        - name: Create success flag
          file:
            path: "{{ config.ci.source }}/success"
            state: touch
          when: failure is undefined

        - name: Create failure flag
          file:
            path: "{{ config.ci.source }}/failure"
            state: touch
          when: failure is defined
...
