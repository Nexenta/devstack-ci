---
- name: OpenStack Continuous Integration
  hosts: local
  vars_files:
    - global.yml
  tasks:
    - name: Set Configuration Parameters
      block:
        - name: Set Global Required Parameters
          set_fact:
            {"{{ item }}":"{{ lookup('env', item) }}"}
          when: hostvars['localhost'][item] is undefined
          with_items: "{{ required }}"

        - name: Print Initial Configuration
          debug:
            msg: "{{ config }}"

        - name: Check Required Parameters
          fail:
            msg: "Required parameter {{ item }} is not defined"
          when: hostvars['localhost'][item] == ""
          with_items: "{{ required }}"

        - name: Set Current Workspace via Jenkins Environment
          set_fact:
            workspace: "{{ lookup('env', 'WORKSPACE') }}"
          when: workspace is undefined

        - name: Set Current Workspace via Shell Environment
          set_fact:
            workspace: "{{ lookup('env', 'PWD') }}"
          when: workspace == ""

        - name: Set Current Build Number
          set_fact:
            build: "{{ lookup('env', 'BUILD_NUMBER') }}"
          when: build is undefined

        - name: Set Predefined Build Number
          set_fact:
            build: 0
          when: build == ""

        - name: Set Common SSH Options
          set_fact:
            ssh: "{{ ssh | default('-q') }} -o {{ item.key }}={{ item.value }}"
          with_items: "{{ config.ssh }}"

        - name: Set Global Parameters
          set_fact:
            matrix:
              ci:
                build: "{{ build }}"
                source: "{{ workspace }}"
                branch: "{{ branch }}"
                backend: "{{ backend }}"
                ssh: "{{ ssh }}"

        - name: Combine Global Parameters
          set_fact:
            config: "{{ config | combine(matrix, recursive=True) }}"

        - name: Set OS Type and Version
          set_fact:
            matrix:
              ci:
                ostype: "{{ item.type }}"
                osversion: "{{ item.version }}"
          when: item.branch == config.ci.branch
          with_items: "{{ config.matrix.os }}"

        - name: Combine OS Type and Version
          set_fact:
            config: "{{ config | combine(matrix, recursive=True) }}"

        - name: Set Current DevStack Branch
          set_fact:
            matrix:
              devstack:
                branch: "{{ item.name }}"
          when: item.ci == config.ci.branch and item.project == "devstack"
          with_items: "{{ config.matrix.branch }}"

        - name: Set Default DevStack Branch
          set_fact:
            matrix:
              devstack:
                branch: "{{ item.name }}"
          when: (matrix.devstack is not defined
                or matrix.devstack.branch is not defined)
                and item.ci == config.ci.branch
                and item.project == "default"
          with_items: "{{ config.matrix.branch }}"

        - name: Combine Current DevStack Branch
          set_fact:
            config: "{{ config | combine(matrix, recursive=True) }}"

        - name: Set Current Backend Parameters
          set_fact:
            matrix:
              backend: "{{ item.value }}"
          when: item.key == config.ci.backend
          with_dict: "{{ config }}"

        - name: Combine Current Backend Parameters
          set_fact:
            config: "{{ config | combine(matrix, recursive=True) }}"

#        - name: Create Inventory for Current Backend
#          add_host:
#            name: "{{ item.host }}"
#            groups: "{{ config.ci.project }}"
#            ansible_host: "{{ item.host }}"
#            ansible_user: "{{ config.backend.ssh.user }}"
#            ansible_connection: "ssh"
#            ansible_ssh_pass: " {{ config.backend.ssh.password }}"
#            ansible_ssh_private_key_file: "{{ ansible_env.HOME }}/.ssh/id_rsa"
#            ansible_ssh_common_args: "{{ config.ci.ssh }}"
#          with_items: "{{ config.backend.instances }}"

        - name: Create Unique BIOS UUID
          bios_uuid:
            project: "{{ config.ci.project }}"
            branch: "{{ config.ci.branch }}"
            backend: "{{ config.ci.backend }}"
            ostype: "{{ config.ci.ostype }}"
            osversion: "{{ config.ci.osversion }}"
          register: bios

        - name: Set Dependent Parameters
          set_fact:
            matrix:
              vm:
                uuid: "{{ bios.uuid }}"
                name: "{{ config.ci.project }}-{{ branch }}-{{ backend | replace('_', '-') }}-{{ bios.uuid }}"

        - name: Combine Dependent Parameters
          set_fact:
            config: "{{ config | combine(matrix, recursive=True) }}"

        - name: Print Current Configuration
          debug:
            msg: "{{ config }}"

      rescue:
        - name: Set Error Flag
          set_fact:
            error: "Configuration parameters task failed"

        - name: Stop Current Job
          fail:
            msg: "{{ error }}"

      always:
        - name: Check Error Flag
          debug:
            msg: "Notify failure handler"
          changed_when: True
          when: error is defined
          notify: failure

    - name: Deploy Virtual Machine
      block:
        - name: Random Delay
          pause:
            seconds: "{{ config.ci.delay | random }}"

        - name: Create Current Build Folder
          vcenter_folder:
            validate_certs: False
            hostname: "{{ config.vsphere.host }}"
            username: "{{ config.vsphere.user }}"
            password: "{{ config.vsphere.password }}"
            datacenter: "{{ config.vsphere.datacenter }}"
            parent_folder: "{{ config.vsphere.folder }}"
            folder_name: "Build_{{ config.ci.build }}"
            state: "present"

        - name: Destroy Virtual Machine
          vmware_guest:
            validate_certs: False
            hostname: "{{ config.vsphere.host }}"
            username: "{{ config.vsphere.user }}"
            password: "{{ config.vsphere.password }}"
            datacenter: "{{ config.vsphere.datacenter }}"
            cluster: "{{ config.vsphere.cluster }}"
            folder: "{{ config.vsphere.datacenter }}/vm/{{ config.vsphere.folder }}/Build_{{ config.ci.build }}"
            name: "{{ config.vm.name }}"
            state: "absent"
            force: yes

        - name: Create Virtual Machine
          vmware_guest:
            validate_certs: False
            hostname: "{{ config.vsphere.host }}"
            username: "{{ config.vsphere.user }}"
            password: "{{ config.vsphere.password }}"
            datacenter: "{{ config.vsphere.datacenter }}"
            cluster: "{{ config.vsphere.cluster }}"
            folder: "{{ config.vsphere.datacenter }}/vm/{{ config.vsphere.folder }}/Build_{{ config.ci.build }}"
            uuid: "{{ config.vm.uuid }}"
            name: "{{ config.vm.name }}"
            guest_id: "{{ config.vm.guest }}"
            disk: "{{ config.vm.disks }}"
            networks: "{{ config.vm.install_networks }}"
            hardware: "{{ config.vm.hardware }}"
            customvalues: "{{ config.vm.customvalues }}"
            wait_for_ip_address: True
            state: "poweredon"

        - name: Shutdown Virtual Machine
          vmware_guest:
            validate_certs: False
            hostname: "{{ config.vsphere.host }}"
            username: "{{ config.vsphere.user }}"
            password: "{{ config.vsphere.password }}"
            uuid: "{{ config.vm.uuid }}"
            name: "{{ config.vm.name }}"
            state_change_timeout: "{{ config.vm.timeout }}"
            state: "shutdownguest"

        - name: Change Virtual Machine Network
          vmware_guest_network:
            validate_certs: False
            hostname: "{{ config.vsphere.host }}"
            username: "{{ config.vsphere.user }}"
            password: "{{ config.vsphere.password }}"
            uuid: "{{ config.vm.uuid }}"
            name: "{{ config.vm.name }}"
            networks: "{{ config.vm.tempest_networks }}"

        - name: Poweron Virtual Machine
          vmware_guest:
            validate_certs: False
            hostname: "{{ config.vsphere.host }}"
            username: "{{ config.vsphere.user }}"
            password: "{{ config.vsphere.password }}"
            uuid: "{{ config.vm.uuid }}"
            name: "{{ config.vm.name }}"
            wait_for_ip_address: True
            state_change_timeout: "{{ config.vm.timeout }}"
            state: "poweredon"

        - name: Identify Virtual Machine
          vmware_guest_facts:
            validate_certs: False
            hostname: "{{ config.vsphere.host }}"
            username: "{{ config.vsphere.user }}"
            password: "{{ config.vsphere.password }}"
            datacenter: "{{ config.vsphere.datacenter }}"
            uuid: "{{ config.vm.uuid }}"
            name: "{{ config.vm.name }}"
          register: vm

        - name: Print Virtual Machine Parameters
          debug:
            var: vm

        - name: Check Virtual Machine IP Address
          fail:
            msg: "Virtual Machine IP address is not defined"
          when: (vm.instance.ipv4 is not defined) or (vm.instance.ipv4 == "")

        - name: Wait for SSH Port to Become Open and Contain "OpenSSH"
          wait_for:
            port: 22
            host: "{{ vm.instance.ipv4 }}"
            search_regex: "OpenSSH"

        - name: Create Inventory for Virtual Machine IP address
          add_host:
            name: "{{ config.vm.name }}"
            groups: "{{ config.ci.project }}"
            ansible_host: "{{ vm.instance.ipv4 }}"
            ansible_user: "{{ config.devstack.user }}"
            ansible_connection: "ssh"
            ansible_ssh_pass: " {{ config.devstack.password }}"
            ansible_ssh_private_key_file: "{{ ansible_env.HOME }}/.ssh/id_rsa"
            ansible_ssh_common_args: "{{ config.ci.ssh }}"

      rescue:
        - name: Set Error Flag
          set_fact:
            error: "Create virtual machine task failed"

        - name: Stop Current Job
          fail:
            msg: "{{ error }}"

      always:
        - name: Check Error Flag
          debug:
            msg: "Notify failure handler"
          changed_when: True
          when: error is defined
          notify: failure

    - name: Compound DevStack Task
      block:
        - name: Checkout CI Repository
          git:
            repo: "{{ config.ci.repository }}"
            dest: "{{ config.ci.base }}/{{ config.ci.destination }}"
            depth: 1
          delegate_to: "{{ config.vm.name }}"

        - name: Checkout DevStack Repository
          git:
            repo: "{{ config.devstack.repository }}"
            dest: "{{ config.ci.base }}/{{ config.devstack.destination }}"
            version: "{{ config.devstack.branch }}"
            depth: 1
          delegate_to: "{{ config.vm.name }}"

        - name: Copy DevStack Profile
          template:
            src: "{{ config.ci.source }}/templates/local.conf.j2"
            dest: "{{ config.ci.base }}/{{ config.devstack.destination }}/local.conf"
            mode: 0644
          delegate_to: "{{ config.vm.name }}"

        - name: Copy CI Profile
          template:
            src: "{{ config.ci.source }}/templates/env.sh.j2"
            dest: "{{ config.ci.base }}/{{ config.ci.destination }}/scripts/env.sh"
            mode: 0755
          delegate_to: "{{ config.vm.name }}"

        - name: Patch DevStack Source Code
          shell: "{{ config.ci.base }}/{{ config.ci.destination }}/scripts/patch.sh"
          args:
            chdir: "{{ config.ci.base }}/{{ config.devstack.destination }}"
          delegate_to: "{{ config.vm.name }}"

        - name: Install DevStack Environment
          shell: "{{ config.ci.base }}/{{ config.devstack.destination }}/stack.sh"
          delegate_to: "{{ config.vm.name }}"

        - name: Acquire Backend Lock
          flock:
            name: "{{ config.ci.project }}-{{ config.ci.backend }}"
            action: "acquire"
          register: lock

        - name: Clean Backup Share
          shell: |
            backup=/net/{{ config.backup.host }}/{{ config.backup.share }}/{{ config.ci.backend }}
            if [[ -d $backup ]]; then
              for item in $(find $backup -mindepth 1 -maxdepth 1); do
                rm -rf $item
              done
            fi
          args:
            executable: "{{ shell }}"
          when: config.backup.host is defined and config.backup.host != ""
                and config.backup.share is defined and config.backup.share != ""
                and config.ci.backend is defined and config.ci.backend != ""

#        - name: Clean NexentaStor5 LUN Mappings
#          shell: |
#            for mapping in $(lunmapping list -O basic -o volume); do
#              lunmapping destroy -a $mapping
#            done
#            {{ hasync }}
#          args:
#            executable: "{{ shell }}"
#          delegate_to: "{{ item.host }}"
#          with_items: "{{ config.backend.instances }}"
#          when: config.ci.backend == "ns5_iscsi"
#
#        - name: Clean NexentaStor4 LUN Mappings and ZFS Volumes
#          shell: |
#            for zvol in $(nmc -c 'show zvol -v' | nawk '/^name/{print $NF}'); do
#              nmc -c "destroy zvol $zvol -R -f -y"
#            done
#            {{ hasync }}
#          args:
#            executable: "{{ shell }}"
#          delegate_to: "{{ item.host }}"
#          with_items: "{{ config.backend.instances }}"
#          when: config.ci.backend == "ns4_iscsi"
#
#        - name: Clean NexentaStor5 Host Groups
#          shell: |
#            for hg in $(hostgroup list -O basic | awk '{print $1}'); do
#              hostgroup destroy $hg
#            done
#            {{ hasync }}
#          args:
#            executable: "{{ shell }}"
#          delegate_to: "{{ item.host }}"
#          with_items: "{{ config.backend.instances }}"
#          when: config.ci.backend == "ns5_iscsi"
#
#        - name: Clean NexentaStor4 Host Groups
#          shell: |
#            for hg in $(nmc -c 'setup scsi-target initiator-group show' | sed 1d | awk '{print $1}'); do
#              nmc -c "destroy scsi-target initiator-group $hg -y"
#            done
#            {{ hasync }}
#          args:
#            executable: "{{ shell }}"
#          delegate_to: "{{ item.host }}"
#          with_items: "{{ config.backend.instances }}"
#          when: config.ci.backend == "ns4_iscsi"
#
#        - name: Clean NexentaStor5 Target Groups
#          shell: |
#            for tg in $(targetgroup list -O basic -o name); do
#              targetgroup destroy $tg
#            done
#            {{ hasync }}
#          args:
#            executable: "{{ shell }}"
#          delegate_to: "{{ item.host }}"
#          with_items: "{{ config.backend.instances }}"
#          when: config.ci.backend == "ns5_iscsi"
#
#        - name: Clean NexentaStor4 Target Groups
#          shell: |
#            for tg in $(nmc -c 'setup scsi-target target-group show' | sed 1d | awk '{print $1}'); do
#              nmc -c "destroy scsi-target target-group $tg -y"
#            done
#            {{ hasync }}
#          args:
#            executable: "{{ shell }}"
#          delegate_to: "{{ item.host }}"
#          with_items: "{{ config.backend.instances }}"
#          when: config.ci.backend == "ns4_iscsi"
#
#        - name: Clean NexentaStor5 iSCSI Targets
#          shell: |
#            for tgt in $(iscsitarget list -O basic -o name); do
#              iscsitarget destroy $tgt
#            done
#            {{ hasync }}
#          args:
#            executable: "{{ shell }}"
#          delegate_to: "{{ item.host }}"
#          with_items: "{{ config.backend.instances }}"
#          when: config.ci.backend == "ns5_iscsi"
#
#        - name: Clean NexentaStor4 iSCSI Targets
#          shell: |
#            for tgt in $(itadm list-target | sed 1d | awk '{print $1}'); do
#              nmc -c "destroy iscsi target $tgt"
#            done
#            {{ hasync }}
#          args:
#            executable: "{{ shell }}"
#          delegate_to: "{{ item.host }}"
#          with_items: "{{ config.backend.instances }}"
#          when: config.ci.backend == "ns4_iscsi"
#
#        - name: Clean NexentaStor4 iSCSI Target Portal Groups
#          shell: |
#            for tpg in $(nmc -c 'show iscsi TPG' | sed 1d | awk '{print $1}'); do
#              nmc -c "destroy iscsi TPG $tpg"
#            done
#            {{ hasync }}
#          args:
#            executable: "{{ shell }}"
#          delegate_to: "{{ item.host }}"
#          with_items: "{{ config.backend.instances }}"
#          when: config.ci.backend == "ns4_iscsi"
#
#        - name: Clean NexentaStor5 ZFS volumes
#          shell: |
#            vg={{ item.pool }}/{{ item.dataset }}
#            if volume list $vg; then
#              for volume in $(volume list -O basic -o path $vg); do
#                volume destroy -Ry $volume
#              done
#            fi
#          args:
#            executable: "{{ shell }}"
#          delegate_to: "{{ item.host }}"
#          with_items: "{{ config.backend.instances }}"
#          when: config.ci.backend == "ns5_iscsi"
#
#        - name: Clean NexentaStor4 ZFS Filesystems
#          shell: |
#            nfs={{ item.pool }}/{{ item.dataset }}
#            for fs in $(nmc -c "show folder $nfs -r" | sed 1,2d | nawk '{print $1}'); do
#              nmc -c "destroy folder $fs -y -R -f"
#            done
#          args:
#            executable: "{{ shell }}"
#          delegate_to: "{{ item.host }}"
#          with_items: "{{ config.backend.instances }}"
#          when: config.ci.backend == "ns4_nfs" or config.ci.backend == "ns4_manila"
#
#        - name: Clean NexentaStor5 ZFS Filesystems
#          shell: |
#            nfs={{ item.pool }}/{{ item.dataset }}
#            for fs in $(filesystem list -O basic -o path -r $nfs | sed 1d); do
#              filesystem destroy -Rfy $fs
#            done
#          args:
#            executable: "{{ shell }}"
#          delegate_to: "{{ item.host }}"
#          with_items: "{{ config.backend.instances }}"
#          when: config.ci.backend == "ns5_nfs" or config.ci.backend == "ns5_manila"

        - name: Run Test Suite
          shell: "{{ config.ci.base }}/{{ config.ci.destination }}/scripts/test.sh"
          delegate_to: "{{ config.vm.name }}"
          when: config.ci.tests == "yes"

      rescue:
        - name: Set Error Flag
          set_fact:
            error: "Compound devstack task failed"

        - name: Stop Current Job
          fail:
            msg: "{{ error }}"

      always:
        - name: Check Error Flag
          debug:
            msg: "Notify failure handler"
          changed_when: True
          when: error is defined
          notify: failure

        - name: Release Backend Lock
          flock:
            name: "{{ config.ci.project }}-{{ config.ci.backend }}"
            action: "release"
          when: lock is defined

        - name: Collect Journal Logs
          shell: |
            if systemctl --version; then
              for unit in $(systemctl --no-legend --no-pager list-unit-files devstack@* | awk '{print $1}'); do
                log="{{ config.ci.base }}/{{ config.ci.logs }}/$unit.log"
                journalctl --all --merge --no-pager --output=cat --unit=$unit >$log
              done
            fi
          args:
            executable: "{{ shell }}"
          delegate_to: "{{ config.vm.name }}"

        - name: Find Results Files
          find:
            paths: "{{ item.source | regex_search('^/') | ternary('', config.ci.base + '/') + item.source }}"
            patterns: "{{ item.pattern }}"
            file_type: "any"
            follow: "yes"
          register: find
          with_items: "{{ config.result.tree }}"
          delegate_to: "{{ config.vm.name }}"

        - name: Create Results Directories
          file:
            path: "{{ config.ci.source }}/{{ config.result.base }}/{{ config.ci.build }}/{{ item.item.destination }}"
            state: "directory"
            recurse: "yes"
            mode: 0755
          with_items: "{{ find.results }}"

        - name: Fetch Results Files
          fetch:
            src: "{{ item.1.path }}"
            dest: "{{ config.ci.source }}/{{ config.result.base }}/{{ config.ci.build }}/{{ item.0.item.destination }}/{{ item.1.path | basename }}"
            validate_checksum: "no"
            fail_on_missing: "no"
            flat: "yes"
          with_subelements:
            - "{{ find.results }}"
            - files
          delegate_to: "{{ config.vm.name }}"

        - name: Find Log Files
          find:
            paths: "{{ config.ci.base }}/{{ config.ci.logs }}"
            patterns: "{{ config.result.logs | join(',') }}"
            file_type: "any"
            follow: "yes"
            size: 1
          register: find
          delegate_to: "{{ config.vm.name }}"

        - name: Tail Latest Log File
          shell: "tail -50 {{ find.files | default({}) | sort(attribute='mtime') | reverse | map(attribute='path') | list | first }}"
          register: tail
          when: find is defined
          delegate_to: "{{ config.vm.name }}"

        - name: Display Latest Log File
          debug:
            msg: "{{ tail.stdout_lines }}"
          when: tail is defined

        - name: Create Latest Link
          file:
            path: "{{ config.ci.source }}/{{ config.result.base }}/latest"
            src: "{{ config.ci.source }}/{{ config.result.base }}/{{ config.ci.build }}"
            state: "link"

        - name: Destroy Virtual Machine
          vmware_guest:
            validate_certs: False
            hostname: "{{ config.vsphere.host }}"
            username: "{{ config.vsphere.user }}"
            password: "{{ config.vsphere.password }}"
            datacenter: "{{ config.vsphere.datacenter }}"
            cluster: "{{ config.vsphere.cluster }}"
            folder: "{{ config.vsphere.datacenter }}/vm/{{ config.vsphere.folder }}/Build_{{ config.ci.build }}"
            name: "{{ config.vm.name }}"
            state: absent
            force: yes
          when: (config.vm.policy == "no") or
                (config.vm.policy == "onerror" and error is undefined)

  handlers:
    - name: Failure Handler
      fail:
        msg: "Failure: {{ error | default('unknown error') }}"
      listen: failure
...
